// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "07/18/2016 22:06:25"
                                                                                
// Verilog Test Bench template for design : I2C
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 
`define halfperiod 50
`timescale 1 ns/ 1 ns
module tb();
// constants                                           
// general purpose registers
// test vector input registers
reg [3:0] data;
reg rst;
reg sclk;
// wires                                               
wire ack;
wire [15:0]  outhigh;

// assign statements (if any)                          
I2C i1 (
// port map - connection between master ports and signals/registers   
	.ack(ack),
	.data(data),
	.outhigh(outhigh),
	.rst(rst),
	.sclk(sclk)
);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
rst = 1'b1 ;
#10 rst = 0'b0;
#(`halfperiod*2+3) rst =1'b1 ;                                                       
// --> end                                             
$display("Running testbench");                       
end  

initial 
begin 
	sclk = 0;
	data = 0;
	#(`halfperiod*1000) $stop; 
end


                                                  
always #(`halfperiod)                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
sclk = ~sclk;                                                       
// --> end                                             
end          



always @(posedge ack)
begin 
	#(`halfperiod/2+3) data = data + 1;

end                                        
endmodule

